[@@@comment "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
let (enable : unit -> unit) =
  fun ()  ->
    ignore
      (Ojs.call
         (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
            "backgroundMode") "enable" [||])
  
let (disable : unit -> unit) =
  fun ()  ->
    ignore
      (Ojs.call
         (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
            "backgroundMode") "disable" [||])
  
let (is_enabled : unit -> bool) =
  fun ()  ->
    Ojs.bool_of_js
      (Ojs.call
         (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
            "backgroundMode") "isEnabled" [||])
  
let (is_active : unit -> bool) =
  fun ()  ->
    Ojs.bool_of_js
      (Ojs.call
         (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
            "backgroundMode") "isActive" [||])
  
let (onactivate : unit -> unit) =
  fun ()  ->
    ignore
      (Ojs.call
         (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
            "backgroundMode") "onactivate" [||])
  
let (set_onactivate : (unit -> unit) -> unit) =
  fun x1  ->
    Ojs.set
      (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
         "backgroundMode") "onactivate" (Ojs.fun_to_js 1 (fun _  -> x1 ()))
  
let (ondeactivate : unit -> unit) =
  fun ()  ->
    ignore
      (Ojs.call
         (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
            "backgroundMode") "ondeactivate" [||])
  
let (set_ondeactivate : (unit -> unit) -> unit) =
  fun x2  ->
    Ojs.set
      (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
         "backgroundMode") "ondeactivate" (Ojs.fun_to_js 1 (fun _  -> x2 ()))
  
let (onfailure : unit -> unit) =
  fun ()  ->
    ignore
      (Ojs.call
         (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
            "backgroundMode") "onfailure" [||])
  
let (set_onfailure : (unit -> unit) -> unit) =
  fun x3  ->
    Ojs.set
      (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
         "backgroundMode") "onfailure" (Ojs.fun_to_js 1 (fun _  -> x3 ()))
  
type config = Ojs.t
let rec (config_of_js : Ojs.t -> config) = fun x5  -> x5

and (config_to_js : config -> Ojs.t) = fun x4  -> x4

let (create_config :
  ?title:string ->
    ?ticker:string ->
      ?text:string -> ?resume:bool -> ?silent:bool -> unit -> config)
  =
  fun ?title:x6  ->
    fun ?ticker:x7  ->
      fun ?text:x8  ->
        fun ?resume:x9  ->
          fun ?silent:x10  ->
            fun ()  ->
              let x11 = Ojs.empty_obj ()  in
              (match x6 with
               | Some x16 -> Ojs.set x11 "title" (Ojs.string_to_js x16)
               | None  -> ());
              (match x7 with
               | Some x15 -> Ojs.set x11 "ticker" (Ojs.string_to_js x15)
               | None  -> ());
              (match x8 with
               | Some x14 -> Ojs.set x11 "text" (Ojs.string_to_js x14)
               | None  -> ());
              (match x9 with
               | Some x13 -> Ojs.set x11 "resume" (Ojs.bool_to_js x13)
               | None  -> ());
              (match x10 with
               | Some x12 -> Ojs.set x11 "silent" (Ojs.bool_to_js x12)
               | None  -> ());
              config_of_js x11
  
let (title : config -> string) =
  fun x17  -> Ojs.string_of_js (Ojs.get (config_to_js x17) "title") 
let (ticker : config -> string) =
  fun x18  -> Ojs.string_of_js (Ojs.get (config_to_js x18) "ticker") 
let (text : config -> string) =
  fun x19  -> Ojs.string_of_js (Ojs.get (config_to_js x19) "text") 
let (resume : config -> bool) =
  fun x20  -> Ojs.bool_of_js (Ojs.get (config_to_js x20) "resume") 
let (silent : config -> bool) =
  fun x21  -> Ojs.bool_of_js (Ojs.get (config_to_js x21) "silent") 
let (set_title : config -> string -> unit) =
  fun x22  ->
    fun x23  -> Ojs.set (config_to_js x22) "title" (Ojs.string_to_js x23)
  
let (set_ticker : config -> string -> unit) =
  fun x24  ->
    fun x25  -> Ojs.set (config_to_js x24) "ticker" (Ojs.string_to_js x25)
  
let (set_text : config -> string -> unit) =
  fun x26  ->
    fun x27  -> Ojs.set (config_to_js x26) "text" (Ojs.string_to_js x27)
  
let (set_resume : config -> bool -> unit) =
  fun x28  ->
    fun x29  -> Ojs.set (config_to_js x28) "resume" (Ojs.bool_to_js x29)
  
let (set_silent : config -> bool -> unit) =
  fun x30  ->
    fun x31  -> Ojs.set (config_to_js x30) "silent" (Ojs.bool_to_js x31)
  
let (set_defaults : config -> unit) =
  fun x32  ->
    ignore
      (Ojs.call
         (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
            "backgroundMode") "setDefaults" [|(config_to_js x32)|])
  
let (get_defaults : unit -> config) =
  fun ()  ->
    config_of_js
      (Ojs.call
         (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
            "backgroundMode") "getDefaults" [||])
  
let (configure : config -> unit) =
  fun x33  ->
    ignore
      (Ojs.call
         (Ojs.get (Ojs.get (Ojs.get Ojs.global "cordova") "plugins")
            "backgroundMode") "configure" [|(config_to_js x33)|])
  
let (log : string -> unit) =
  fun x34  ->
    ignore
      (Ojs.call (Ojs.get Ojs.global "console") "log"
         [|(Ojs.string_to_js x34)|])
  
